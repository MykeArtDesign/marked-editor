{"version":3,"sources":["text.js","App.js","serviceWorker.js","index.js"],"names":["text","App","state","convertToMarkdown","__html","marked","sanitize","localStorage","getItem","this","setState","setItem","event","target","value","_this2","react_default","a","createElement","className","name","id","onChange","handleChange","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAAaA,eAAO,wqBCMCC,6MACnBC,MAAQ,CACNF,KAAMA,KAiBRG,kBAAoB,SAACH,GAEnB,MAAO,CAACI,OADOC,IAAOL,EAAM,CAACM,UAAU,yFAdvC,IAAMN,EAAOO,aAAaC,QAAQ,QAClCR,EAAOS,KAAKC,SAAS,CAAEV,SAAUS,KAAKC,SAAS,CAAEV,KAAMS,KAAKP,MAAMF,oDAI9C,IACZA,EAASS,KAAKP,MAAdF,KACRO,aAAaI,QAAQ,OAAQX,wCAEjBY,GACZH,KAAKC,SAAS,CAACV,KAAMY,EAAMC,OAAOC,yCAQ1B,IAAAC,EAAAN,KACR,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,YAAUE,KAAK,SAASC,GAAG,SAASP,MAAQL,KAAKP,MAAMF,KAAOmB,UAAU,WAAWG,SAAU,SAACV,GAAD,OAAWG,EAAKQ,aAAcX,MAC3HI,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUF,UAAU,WAAWK,wBAA0Bf,KAAKN,kBAAkBM,KAAKP,MAAMF,gBA5B1EyB,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d07d3d26.chunk.js","sourcesContent":["export const text = '# Titre\\n## Sous-Titre \\n### Titre plus profond\\n\\n > Les paragraphes sont séparés\\n> par une ligne vide.\\n\\n>> Laissé deux espaces à la fin d\\'une ligne pour  \\n>> aller à la ligne.\\n\\nAttributs *italique*, **gras**, \\n`monospace`, ~~rayé~~.\\n\\n ![Zozor](http://uploads.siteduzero.com/files/420001_421000/420263.png) \\n\\nListe:\\n\\n  * pommes\\n  * oranges\\n  * poires\\n\\nListe numérotée:\\n\\n  1. pomme\\n  2. poire\\n  3. pain\\n\\n *[Mickael Sorhaindo](https://www.youtube.com/channel/UC44O_iTBLEcqSjeFgEP3huw/featured?view_as=public)* \\n\\n Lien automatique : https://www.facebook.com/mickael.sorhaindo?ref=bookmarks \\n\\n```\\n console.log(\"hello \");\\n``` '","import React, {Component} from 'react'\nimport marked from 'marked'\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {text} from './text'\nexport default class App extends Component {\n  state = {\n    text: text\n  }\n\n  componentDidMount () {\n    const text = localStorage.getItem('text')\n    text ? this.setState({ text }) : this.setState({ text: this.state.text })\n    \n  }\n\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n  handleChange (event) {\n    this.setState({text: event.target.value})\n  }\n\n  convertToMarkdown = (text) => {\n    const __html = marked(text, {sanitize: true})\n    return {__html}\n  }\n \n  render () {\n    return (\n      <div className=\"container-fluid row\">\n        <textarea name=\"editor\" id=\"editor\" value={ this.state.text } className=\"col-sm-6\" onChange={(event) => this.handleChange (event)}></textarea>\n        <div id=\"preview\" className=\"col-sm-6\" dangerouslySetInnerHTML={ this.convertToMarkdown(this.state.text) }></div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}